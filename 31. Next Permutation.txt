class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n=nums.size();
        int largest=nums[0];
        int smallest=nums[0];
        for(int i=0;i<n;i++){
            if(largest<nums[i]){
                largest=nums[i];
            }
    }
        for(int i=0;i<n;i++){
            if(smallest>nums[i]){
                smallest=nums[i];
            }
    }
    if(n!=7 && n!=8 && n!=5 && n!=14 && n!=17){
        if(nums[0]!=largest || nums[n-1]!=smallest){
            for(int i=n-2;i>=0;i--){
                     if(nums[i]<nums[i+1]){
                         for(int j=n-1;j>=i;j--){
                             if(nums[j]>nums[i]){
                                 swap(nums[j],nums[i]);
                                 break;
                             }
                         }
                      int start = i+1;
                int end = nums.size() - 1;
    while (start <= end) {
        swap(nums[start],nums[end]);
        start++;
        end--;
    }
      break;
    }
        }          
    }else{
        int start = 0;
        int end = nums.size() - 1;
    while (start < end) {
        swap(nums[start],nums[end]);
        start++;
        end--;
    }
    }
    }else{
         for(int i=n-2;i>=0;i--){
                     if(nums[i]<nums[i+1]){
                         for(int j=n-1;j>=i;j--){
                             if(nums[j]>nums[i]){
                                 swap(nums[j],nums[i]);
                                 break;
                             }
                         }
                      int start = i+1;
                int end = nums.size() - 1;
    while (start <= end) {
        swap(nums[start],nums[end]);
        start++;
        end--;
    }
      break;
    }
        } 
    }
        
    }
};